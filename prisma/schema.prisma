// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  bio             String    @default("404 bio not found")
  createdAt       DateTime  @default(now())
  writtenPosts    Post[]    @relation("UserWrittenPosts")
  writtenComments Comment[] @relation("UserWrittenComments")
  likedPosts      Post[]
  accounts        Account[]
  sessions        Session[]
  savedPostsId    String[]
  following       String[]
}

model Post {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  slug       String
  title      String
  body       String
  likes      Int       @default(0)
  saved      Int       @default(0)
  coverImage String?
  comments   Comment[]
  author     User      @relation("UserWrittenPosts", fields: [authorId], references: [id])
  authorId   String
  likedBy    User[]
  tags       String[]
}

model Tag {
  id   String  @id @default(cuid())
  name String  @unique
  info String?
}

model Comment {
  id              String    @id @default(cuid())
  content         String
  author          User      @relation("UserWrittenComments", fields: [authorId], references: [id])
  authorId        String
  likes           Int       @default(0)
  parentComment   Comment?  @relation("CommentParentComments", fields: [parentCommentId], references: [id])
  parentCommentId String?
  childComments   Comment[] @relation("CommentParentComments")
  Post            Post      @relation(fields: [postId], references: [id])
  postId          String
}
